{
  "_args": [
    [
      {
        "raw": "layout@https://registry.npmjs.org/layout/-/layout-2.2.0.tgz",
        "scope": null,
        "escapedName": "layout",
        "name": "layout",
        "rawSpec": "https://registry.npmjs.org/layout/-/layout-2.2.0.tgz",
        "spec": "https://registry.npmjs.org/layout/-/layout-2.2.0.tgz",
        "type": "remote"
      },
      "/Users/edgar/node_modules/dr-svg-sprites"
    ]
  ],
  "_from": "layout@2.2.0",
  "_id": "layout@2.2.0",
  "_inCache": true,
  "_location": "/dr-svg-sprites/layout",
  "_phantomChildren": {},
  "_requested": {
    "raw": "layout@https://registry.npmjs.org/layout/-/layout-2.2.0.tgz",
    "scope": null,
    "escapedName": "layout",
    "name": "layout",
    "rawSpec": "https://registry.npmjs.org/layout/-/layout-2.2.0.tgz",
    "spec": "https://registry.npmjs.org/layout/-/layout-2.2.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/dr-svg-sprites"
  ],
  "_resolved": "https://registry.npmjs.org/layout/-/layout-2.2.0.tgz",
  "_shasum": "31e44bfc18dd1019b3ffb208e402a4bbfe2e6af4",
  "_shrinkwrap": null,
  "_spec": "layout@https://registry.npmjs.org/layout/-/layout-2.2.0.tgz",
  "_where": "/Users/edgar/node_modules/dr-svg-sprites",
  "author": {
    "name": "Todd Wolfson",
    "email": "todd@twolfson.com",
    "url": "http://twolfson.com/"
  },
  "bugs": {
    "url": "https://github.com/twolfson/layout/issues"
  },
  "dependencies": {
    "bin-pack": "~1.0.1"
  },
  "description": "Organize and layout items based on various algorithms",
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-cli": "~0.1.13",
    "grunt-spritesmith": "~2.20.0",
    "jshint": "~2.5.10",
    "nodeunit": "~0.9.0"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "https://github.com/twolfson/layout",
  "keywords": [
    "layout",
    "blueprint",
    "organize",
    "pack",
    "algorithm"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/twolfson/layout/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/layout",
  "name": "layout",
  "optionalDependencies": {},
  "readme": "# layout [![Build status](https://travis-ci.org/twolfson/layout.png?branch=master)](https://travis-ci.org/twolfson/layout)\n\nOrganize and layout items based on various algorithms\n\nVisualizations of output data:\n\n|         `top-down`        |          `left-right`         |         `diagonal`        |           `alt-diagonal`          |          `binary-tree`          |\n|---------------------------|-------------------------------|---------------------------|-----------------------------------|---------------------------------|\n| ![top-down][top-down-img] | ![left-right][left-right-img] | ![diagonal][diagonal-img] | ![alt-diagonal][alt-diagonal-img] | ![binary-tree][binary-tree-img] |\n\n[top-down-img]: docs/top-down.png\n[left-right-img]: docs/left-right.png\n[diagonal-img]: docs/diagonal.png\n[alt-diagonal-img]: docs/alt-diagonal.png\n[binary-tree-img]: docs/binary-tree.png\n\n## Getting Started\nInstall the module with: `npm install layout`\n\n```js\n// Load in layout\nvar layout = require('layout');\n\n// Generate a new layer to organize items on\nvar layer = layout('top-down');\n\n// Add items that you want to organize\nlayer.addItem({'height': 20, 'width': 10, 'meta': 'medium'});\nlayer.addItem({'height': 10, 'width': 10, 'meta': 'small'});\nlayer.addItem({'height': 50, 'width': 40, 'meta': 'large'});\n\n// Export the info\nvar info = layer['export']();\n\n// We get back the width and height of the pack as well as organized items\n{\n    height: 80,\n    width: 40,\n    items: [{\n        height: 10,\n        width: 10,\n        meta: 'small',\n        x: 0,\n        y: 0\n    }, {\n        height: 20,\n        width: 10,\n        meta: 'medium',\n        x: 0,\n        y: 10\n    }, {\n        height: 50,\n        width: 40,\n        meta: 'large',\n        x: 0,\n        y: 30\n    }]\n}\n```\n\n## Documentation\nLayout is a constructor function\n\n```js\n/**\n * Layout adds items in an algorithmic fashion\n * @constructor\n * @param {String|Object} [algorithm=\"top-down\"] Name of algorithm or custom algorithm to use\n *   Available algorithms are listed in the Algorithms section\n * @param {Mixed} [options] Options to provide for the algorithm\n */\n```\n\nItems can be added via `addItem` which are required to have a `height` and `width`. Any additional info should be stored inside of `meta`.\n\n```js\n/**\n * @param {Object} item Item to store -- this currently is mutated in-memory\n * @param {Number} item.width Width of the item\n * @param {Number} item.height Height of the item\n * @param {Mixed} [item.meta] Any meta data you would like to store related to the item\n */\n```\n\n`export` is how you take your items and organize them.\n\n```js\n/**\n * @returns {Object} retObj\n * @returns {Number} retObj.height Height of the processed layout\n * @returns {Number} retObj.width Width of the processed layout\n * @returns {Mixed[]} retObj.items Organized items\n */\n```\n\n### Algorithms\nCurrently `layout` supports 5 different layout types which are listed below.\n\n#### `top-down`\nThe `top-down` algorithm places items vertically.\n\n![top-down image][top-down-img]\n\nBy default, it sorts from smallest (top) to largest (bottom). However, this can be disabled via `sort: false`.\n\n**Options:**\n\n- sort `Boolean` Flag to enable/disable sorting from smallest (top) to largest (bottom)\n    - By default, this is enabled (`true`)\n\n#### `left-right`\nThe `left-right` algorithm places items horizontally.\n\n![left-right image][left-right-img]\n\nBy default, it sorts from smallest (left) to largest (right). However, this can be disabled via `sort: false`.\n\n**Options:**\n\n- sort `Boolean` Flag to enable/disable sorting from smallest (left) to largest (right)\n    - By default, this is enabled (`true`)\n\n#### `diagonal`\nThe `diagonal` algorithm places items diagonally (top-left to bottom-right).\n\n![diagonal image][diagonal-img]\n\nBy default, it sorts from smallest (top-left) to largest (bottom-right). However, this can be disabled via `sort: false`.\n\n**Options:**\n\n- sort `Boolean` Flag to enable/disable sorting from smallest (top-left) to largest (bottom-right)\n    - By default, this is enabled (`true`)\n\n#### `alt-diagonal`\nThe `alt-diagonal` algorithm places items diagonally (top-right to bottom-left).\n\n![alt-diagonal image][alt-diagonal-img]\n\nBy default, it sorts from smallest (top-right) to largest (bottom-left). However, this can be disabled via `sort: false`.\n\n**Options:**\n\n- sort `Boolean` Flag to enable/disable sorting from smallest (top-right) to largest (bottom-left)\n    - By default, this is enabled (`true`)\n\n#### `binary-tree`\nThe `binary-tree` algorithm packs items via the [binary tree algorithm][].\n\nThis is an efficient way to pack items into the smallest container possible.\n\n[binary tree algorithm]: http://codeincomplete.com/posts/2011/5/7/bin_packing/\n\n![binary-tree image][binary-tree-img]\n\n### Custom algorithms\nYou can add your own algorithm via `layout.addAlgorithm`\n```js\n/**\n * Method to add new algorithms via\n * @param {String} name Name of algorithm\n * @param {Object} algorithm Algorithm to bind under name\n * @param {Function} algorithm.sort Algorithm to sort object by\n * @param {Function} algorithm.placeItems Algorithm to place items by\n */\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint via `npm run lint` and test via `npm test`.\n\n## Donating\nSupport this project and [others by twolfson][gratipay] via [gratipay][].\n\n[![Support via Gratipay][gratipay-badge]][gratipay]\n\n[gratipay-badge]: https://cdn.rawgit.com/gratipay/gratipay-badge/2.x.x/dist/gratipay.png\n[gratipay]: https://www.gratipay.com/twolfson/\n\n## License\nCopyright (c) 2012-2014 Todd Wolfson\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/twolfson/layout.git"
  },
  "scripts": {
    "lint": "jshint lib/ test/",
    "test": "npm run lint && nodeunit test/"
  },
  "version": "2.2.0"
}
