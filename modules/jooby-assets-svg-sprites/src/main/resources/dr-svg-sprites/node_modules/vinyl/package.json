{
  "_args": [
    [
      {
        "raw": "vinyl@https://registry.npmjs.org/vinyl/-/vinyl-1.2.0.tgz",
        "scope": null,
        "escapedName": "vinyl",
        "name": "vinyl",
        "rawSpec": "https://registry.npmjs.org/vinyl/-/vinyl-1.2.0.tgz",
        "spec": "https://registry.npmjs.org/vinyl/-/vinyl-1.2.0.tgz",
        "type": "remote"
      },
      "/Users/edgar/node_modules/dr-svg-sprites"
    ]
  ],
  "_from": "vinyl@>=1.0.0 <2.0.0",
  "_id": "vinyl@1.2.0",
  "_inCache": true,
  "_location": "/dr-svg-sprites/vinyl",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vinyl@https://registry.npmjs.org/vinyl/-/vinyl-1.2.0.tgz",
    "scope": null,
    "escapedName": "vinyl",
    "name": "vinyl",
    "rawSpec": "https://registry.npmjs.org/vinyl/-/vinyl-1.2.0.tgz",
    "spec": "https://registry.npmjs.org/vinyl/-/vinyl-1.2.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/dr-svg-sprites",
    "/dr-svg-sprites/gulp-sourcemaps",
    "/dr-svg-sprites/vinyl-fs"
  ],
  "_resolved": "https://registry.npmjs.org/vinyl/-/vinyl-1.2.0.tgz",
  "_shasum": "5c88036cf565e5df05558bfc911f8656df218884",
  "_shrinkwrap": null,
  "_spec": "vinyl@https://registry.npmjs.org/vinyl/-/vinyl-1.2.0.tgz",
  "_where": "/Users/edgar/node_modules/dr-svg-sprites",
  "author": {
    "name": "Fractal",
    "email": "contact@wearefractal.com",
    "url": "http://wearefractal.com/"
  },
  "bugs": {
    "url": "https://github.com/gulpjs/vinyl/issues"
  },
  "dependencies": {
    "clone": "^1.0.0",
    "clone-stats": "^0.0.1",
    "replace-ext": "0.0.1"
  },
  "description": "A virtual file format",
  "devDependencies": {
    "buffer-equal": "0.0.1",
    "eslint": "^1.7.3",
    "eslint-config-gulp": "^2.0.0",
    "event-stream": "^3.1.0",
    "github-changes": "^1.0.1",
    "istanbul": "^0.3.0",
    "istanbul-coveralls": "^1.0.1",
    "jscs": "^2.3.5",
    "jscs-preset-gulp": "^1.0.0",
    "lodash.templatesettings": "^3.1.0",
    "mocha": "^2.0.0",
    "rimraf": "^2.2.5",
    "should": "^7.0.0"
  },
  "engines": {
    "node": ">= 0.9"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "homepage": "http://github.com/gulpjs/vinyl",
  "license": "MIT",
  "main": "./index.js",
  "name": "vinyl",
  "optionalDependencies": {},
  "readme": "# vinyl [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Dependency Status][depstat-image]][depstat-url]\n\n## Information\n<table><tr><td>Package</td><td>vinyl</td></tr><tr><td>Description</td><td>A virtual file format</td></tr><tr><td>Node Version</td><td>>= 0.9</td></tr></table>\n\n## What is this?\nRead this for more info about how this plays into the grand scheme of things [https://medium.com/@eschoff/3828e8126466](https://medium.com/@eschoff/3828e8126466)\n\n## File\n\n```javascript\nvar File = require('vinyl');\n\nvar coffeeFile = new File({\n  cwd: \"/\",\n  base: \"/test/\",\n  path: \"/test/file.coffee\",\n  contents: new Buffer(\"test = 123\")\n});\n```\n\n### isVinyl\nWhen checking if an object is a vinyl file, you should not use instanceof. Use the isVinyl function instead.\n\n```js\nvar File = require('vinyl');\n\nvar dummy = new File({stuff});\nvar notAFile = {};\n\nFile.isVinyl(dummy); // true\nFile.isVinyl(notAFile); // false\n```\n\n### isCustomProp\nVinyl checks if a property is not managed internally, such as `sourceMap`. This is than used in `constructor(options)` when setting, and `clone()` when copying properties.\n\n```js\nvar File = require('vinyl');\n\nFile.isCustomProp('sourceMap'); // true\nFile.isCustomProp('path'); // false -> internal getter/setter\n```\n\nRead more in [Extending Vinyl](#extending-vinyl).\n\n### constructor(options)\n#### options.cwd\nType: `String`<br><br>Default: `process.cwd()`\n\n#### options.base\nUsed for relative pathing. Typically where a glob starts.\n\nType: `String`<br><br>Default: `options.cwd`\n\n#### options.path\nFull path to the file.\n\nType: `String`<br><br>Default: `undefined`\n\n#### options.history\nPath history. Has no effect if `options.path` is passed.\n\nType: `Array`<br><br>Default: `options.path ? [options.path] : []`\n\n#### options.stat\nThe result of an fs.stat call. See [fs.Stats](http://nodejs.org/api/fs.html#fs_class_fs_stats) for more information.\n\nType: `fs.Stats`<br><br>Default: `null`\n\n#### options.contents\nFile contents.\n\nType: `Buffer, Stream, or null`<br><br>Default: `null`\n\n#### options.{custom}\nAny other option properties will just be assigned to the new File object.\n\n```js\nvar File = require('vinyl');\n\nvar file = new File({foo: 'bar'});\nfile.foo === 'bar'; // true\n```\n\n### isBuffer()\nReturns true if file.contents is a Buffer.\n\n### isStream()\nReturns true if file.contents is a Stream.\n\n### isNull()\nReturns true if file.contents is null.\n\n### clone([opt])\nReturns a new File object with all attributes cloned.<br>By default custom attributes are deep-cloned.\n\nIf opt or opt.deep is false, custom attributes will not be deep-cloned.\n\nIf opt.contents is false, it will copy file.contents Buffer's reference.\n\n### pipe(stream[, opt])\nIf file.contents is a Buffer, it will write it to the stream.\n\nIf file.contents is a Stream, it will pipe it to the stream.\n\nIf file.contents is null, it will do nothing.\n\nIf opt.end is false, the destination stream will not be ended (same as node core).\n\nReturns the stream.\n\n### inspect()\nReturns a pretty String interpretation of the File. Useful for console.log.\n\n### contents\nThe [Stream](https://nodejs.org/api/stream.html#stream_stream) or [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer) of the file as it was passed in via options, or as the result of modification.\n\nFor example:\n\n```js\nif (file.isBuffer()) {\n    console.log(file.contents.toString()); // logs out the string of contents\n}\n```\n\n### path\nAbsolute pathname string or `undefined`. Setting to a different value pushes the old value to `history`.\n\n### history\nArray of `path` values the file object has had, from `history[0]` (original) through `history[history.length - 1]` (current). `history` and its elements should normally be treated as read-only and only altered indirectly by setting `path`.\n\n### relative\nReturns path.relative for the file base and file path.\n\nExample:\n\n```javascript\nvar file = new File({\n  cwd: \"/\",\n  base: \"/test/\",\n  path: \"/test/file.coffee\"\n});\n\nconsole.log(file.relative); // file.coffee\n```\n\n### dirname\nGets and sets path.dirname for the file path.\n\nExample:\n\n```javascript\nvar file = new File({\n  cwd: \"/\",\n  base: \"/test/\",\n  path: \"/test/file.coffee\"\n});\n\nconsole.log(file.dirname); // /test\n\nfile.dirname = '/specs';\n\nconsole.log(file.dirname); // /specs\nconsole.log(file.path); // /specs/file.coffee\n```\n\n### basename\nGets and sets path.basename for the file path.\n\nExample:\n\n```javascript\nvar file = new File({\n  cwd: \"/\",\n  base: \"/test/\",\n  path: \"/test/file.coffee\"\n});\n\nconsole.log(file.basename); // file.coffee\n\nfile.basename = 'file.js';\n\nconsole.log(file.basename); // file.js\nconsole.log(file.path); // /test/file.js\n```\n\n### stem\nGets and sets stem (filename without suffix) for the file path.\n\nExample:\n\n```javascript\nvar file = new File({\n  cwd: \"/\",\n  base: \"/test/\",\n  path: \"/test/file.coffee\"\n});\n\nconsole.log(file.stem); // file\n\nfile.stem = 'foo';\n\nconsole.log(file.stem); // foo\nconsole.log(file.path); // /test/foo.coffee\n```\n\n### extname\nGets and sets path.extname for the file path.\n\nExample:\n\n```javascript\nvar file = new File({\n  cwd: \"/\",\n  base: \"/test/\",\n  path: \"/test/file.coffee\"\n});\n\nconsole.log(file.extname); // .coffee\n\nfile.extname = '.js';\n\nconsole.log(file.extname); // .js\nconsole.log(file.path); // /test/file.js\n```\n\n## Extending Vinyl\nWhen extending Vinyl into your own class with extra features, you need to think about a few things.\n\nWhen you have your own properties that are managed internally, you need to extend the static `isCustomProp` method to return `false` when one of these properties is queried.\n\n```js\nconst File = require('vinyl');\n\nconst builtInProps = ['foo', '_foo'];\n\nclass SuperFile extends File {\n  constructor(options) {\n    super(options);\n    this._foo = 'example internal read-only value';\n  }\n\n  get foo() {\n    return this._foo;\n  }\n\n  static isCustomProp(name) {\n    return super.isCustomProp(name) && builtInProps.indexOf(name) === -1;\n  }\n}\n```\n\nThis makes properties `foo` and `_foo` ignored when cloning, and when passed in options to `constructor(options)` so they don't get assigned to the new object.\n\nSame goes for `clone()`. If you have your own internal stuff that needs special handling during cloning, you should extend it to do so.\n\n[npm-url]: https://npmjs.org/package/vinyl\n[npm-image]: https://badge.fury.io/js/vinyl.svg\n[travis-url]: https://travis-ci.org/gulpjs/vinyl\n[travis-image]: https://travis-ci.org/gulpjs/vinyl.svg?branch=master\n[coveralls-url]: https://coveralls.io/github/gulpjs/vinyl\n[coveralls-image]: https://coveralls.io/repos/github/gulpjs/vinyl/badge.svg\n[depstat-url]: https://david-dm.org/gulpjs/vinyl\n[depstat-image]: https://david-dm.org/gulpjs/vinyl.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/gulpjs/vinyl.git"
  },
  "scripts": {
    "changelog": "github-changes -o gulpjs -r vinyl -b master -f ./CHANGELOG.md --order-semver --use-commit-body",
    "coveralls": "istanbul cover _mocha && istanbul-coveralls",
    "lint": "eslint . && jscs *.js lib/ test/",
    "pretest": "npm run lint",
    "test": "mocha"
  },
  "version": "1.2.0"
}
