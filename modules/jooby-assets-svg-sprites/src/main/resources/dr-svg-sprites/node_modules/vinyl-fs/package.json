{
  "_args": [
    [
      {
        "raw": "vinyl-fs@https://registry.npmjs.org/vinyl-fs/-/vinyl-fs-2.4.4.tgz",
        "scope": null,
        "escapedName": "vinyl-fs",
        "name": "vinyl-fs",
        "rawSpec": "https://registry.npmjs.org/vinyl-fs/-/vinyl-fs-2.4.4.tgz",
        "spec": "https://registry.npmjs.org/vinyl-fs/-/vinyl-fs-2.4.4.tgz",
        "type": "remote"
      },
      "/Users/edgar/node_modules/dr-svg-sprites"
    ]
  ],
  "_from": "vinyl-fs@2.4.4",
  "_id": "vinyl-fs@2.4.4",
  "_inCache": true,
  "_location": "/dr-svg-sprites/vinyl-fs",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vinyl-fs@https://registry.npmjs.org/vinyl-fs/-/vinyl-fs-2.4.4.tgz",
    "scope": null,
    "escapedName": "vinyl-fs",
    "name": "vinyl-fs",
    "rawSpec": "https://registry.npmjs.org/vinyl-fs/-/vinyl-fs-2.4.4.tgz",
    "spec": "https://registry.npmjs.org/vinyl-fs/-/vinyl-fs-2.4.4.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/dr-svg-sprites"
  ],
  "_resolved": "https://registry.npmjs.org/vinyl-fs/-/vinyl-fs-2.4.4.tgz",
  "_shasum": "be6ff3270cb55dfd7d3063640de81f25d7532239",
  "_shrinkwrap": null,
  "_spec": "vinyl-fs@https://registry.npmjs.org/vinyl-fs/-/vinyl-fs-2.4.4.tgz",
  "_where": "/Users/edgar/node_modules/dr-svg-sprites",
  "author": {
    "name": "Fractal",
    "email": "contact@wearefractal.com",
    "url": "http://wearefractal.com/"
  },
  "bugs": {
    "url": "https://github.com/wearefractal/vinyl-fs/issues"
  },
  "dependencies": {
    "duplexify": "^3.2.0",
    "glob-stream": "^5.3.2",
    "graceful-fs": "^4.0.0",
    "gulp-sourcemaps": "1.6.0",
    "is-valid-glob": "^0.3.0",
    "lazystream": "^1.0.0",
    "lodash.isequal": "^4.0.0",
    "merge-stream": "^1.0.0",
    "mkdirp": "^0.5.0",
    "object-assign": "^4.0.0",
    "readable-stream": "^2.0.4",
    "strip-bom": "^2.0.0",
    "strip-bom-stream": "^1.0.0",
    "through2": "^2.0.0",
    "through2-filter": "^2.0.0",
    "vali-date": "^1.0.0",
    "vinyl": "^1.0.0"
  },
  "description": "Vinyl adapter for the file system",
  "devDependencies": {
    "buffer-equal": "^0.0.1",
    "default-resolution": "^1.0.1",
    "del": "^2.2.0",
    "eslint": "^1.10.3",
    "eslint-config-gulp": "^2.0.0",
    "expect": "^1.14.0",
    "github-changes": "^1.0.1",
    "istanbul": "^0.3.0",
    "istanbul-coveralls": "^1.0.1",
    "jscs": "^2.4.0",
    "jscs-preset-gulp": "^1.0.0",
    "mocha": "^2.0.0",
    "mocha-lcov-reporter": "^1.0.0",
    "rimraf": "^2.2.5",
    "should": "^7.0.0",
    "sinon": "^1.10.3"
  },
  "engines": {
    "node": ">=0.10"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "homepage": "http://github.com/wearefractal/vinyl-fs",
  "license": "MIT",
  "main": "./index.js",
  "name": "vinyl-fs",
  "optionalDependencies": {},
  "readme": "<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n</p>\n\n# vinyl-fs\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\n\n[Vinyl][vinyl] adapter for the file system.\n\n## What is Vinyl?\n\n[Vinyl][vinyl] is a very simple metadata object that describes a file. When you think of a file, two attributes come to mind: `path` and `contents`. These are the main attributes on a [Vinyl][vinyl] object. A file does not necessarily represent something on your computerâ€™s file system. You have files on S3, FTP, Dropbox, Box, CloudThingly.io and other services. [Vinyl][vinyl] can be used to describe files from all of these sources.\n\n## What is a Vinyl Adapter?\n\nWhile Vinyl provides a clean way to describe a file, we now need a way to access these files. Each file source needs what I call a \"Vinyl adapter\". A Vinyl adapter simply exposes a `src(globs)` and a `dest(folder)` method. Each return a stream. The `src` stream produces Vinyl objects, and the `dest` stream consumes Vinyl objects. Vinyl adapters can expose extra methods that might be specific to their input/output medium, such as the `symlink` method `vinyl-fs` provides.\n\n## Usage\n\n```javascript\nvar map = require('map-stream');\nvar vfs = require('vinyl-fs');\n\nvar log = function(file, cb) {\n  console.log(file.path);\n  cb(null, file);\n};\n\nvfs.src(['./js/**/*.js', '!./js/vendor/*.js'])\n  .pipe(map(log))\n  .pipe(vfs.dest('./output'));\n```\n\n## API\n\n### `src(globs[, options])`\n\nTakes a glob string or an array of glob strings as the first argument and an options object as the second.\nReturns a stream of [vinyl] `File` objects.\n\n__Note: UTF-8 BOM will be stripped from all UTF-8 files read with `.src` unless disabled in the options.__\n\n#### Globs\n\nGlobs are executed in order, so negations should follow positive globs.\n\nFor example:\n\n```js\nfs.src(['!b*.js', '*.js'])\n```\n\nwould not exclude any files, but the following would:\n\n```js\nfs.src(['*.js', '!b*.js'])\n```\n\n#### Options\n\n##### `options.cwd`\n\nThe working directory the folder is relative to.\n\nType: `String`\n\nDefault: `process.cwd()`\n\n##### `options.base`\n\nThe folder relative to the cwd. This is used to determine the file names when saving in `.dest()`.\n\nType: `String`\n\nDefault: The part of the path before the glob (if any) begins. For example, `path/to/**/*.js` would resolve to `path/to`. If there is no glob (i.e. a file path with no pattern), then the dirname of the path is used. For example, `path/to/some/file.js` would resolve to `path/to/some`.\n\n##### `options.buffer`\n\nWhether or not you want to buffer the file contents into memory. Setting to `false` will make `file.contents` a paused Stream.\n\nType: `Boolean`\n\nDefault: `true`\n\n##### `options.read`\n\nWhether or not you want the file to be read at all. Useful for stuff like removing files. Setting to `false` will make `file.contents` `null` and will disable writing the file to disk via `.dest()`.\n\nType: `Boolean`\n\nDefault: `true`\n\n##### `options.since`\n\nOnly streams files that have been modified since the time specified.\n\nType: `Date` or `Number`\n\nDefault: `undefined`\n\n##### `options.stripBOM`\n\nCauses the BOM to be stripped on UTF-8 encoded files. Set to `false` if you need the BOM for some reason.\n\nType: `Boolean`\n\nDefault: `true`\n\n##### `options.passthrough`\n\nAllows `.src` to be used in the middle of a pipeline (using a duplex stream) which passes through all objects received and adds all files globbed to the stream.\n\nType: `Boolean`\n\nDefault: `false`\n\n##### `options.sourcemaps`\n\nEnables sourcemap support on files passed through the stream.  Will load inline sourcemaps and resolve sourcemap links from files. Uses [gulp-sourcemaps] under the hood.\n\nType: `Boolean`\n\nDefault: `false`\n\n##### `options.followSymlinks` - `true` if you want\n\nWhether or not to recursively resolve symlinks to their targets. Setting to `false` to preserve them as symlinks and make `file.symlink` equal the original symlink's target path.\n\nType: `Boolean`\n\nDefault: `true`\n\n##### other\n\nAny glob-related options are documented in [glob-stream] and [node-glob].\nAny through2-related options are documented in [through2].\n\n### `dest(folder[, options])`\n\nTakes a folder path string or a function as the first argument and an options object as the second. If given a function, it will be called with each [vinyl] `File` object and must return a folder path.\nReturns a stream that accepts [vinyl] `File` objects, writes them to disk at the folder/cwd specified, and passes them downstream so you can keep piping these around.\n\nOnce the file is written to disk, an attempt is made to determine if the `stat.mode`, `stat.mtime` and `stat.atime` of the [vinyl] `File` object differ from the file on the filesystem.\nIf they differ and the running process owns the file, the corresponding filesystem metadata is updated.\nIf they don't differ or the process doesn't own the file, the attempt is skipped silently.\n__This functionality is disabled on Windows operating systems or any other OS that doesn't support `process.getuid` or `process.geteuid` in node. This is due to Windows having very unexpected results through usage of `fs.fchmod` and `fs.futimes`.__\n\nIf the file has a `symlink` attribute specifying a target path, then a symlink will be created.\n\n__Note: The file will be modified after being written to this stream.__\n  - `cwd`, `base`, and `path` will be overwritten to match the folder.\n  - `stat` will be updated to match the file on the filesystem.\n  - `contents` will have it's position reset to the beginning if it is a stream.\n\n#### Options\n\n##### `options.cwd`\n\nThe working directory the folder is relative to.\n\nType: `String`\n\nDefault: `process.cwd()`\n\n##### `options.base`\n\nThe folder relative to the cwd. This is used to determine the file names when saving in `.dest()`. Can also be a function that takes in a file and returns a folder path.\n\nType: `String` or `Function`\n\nDefault: The `cwd` resolved to the folder path.\n\n##### `options.mode`\n\nThe mode the files should be created with.\n\nType: `Number`\n\nDefault: The `mode` of the input file (`file.stat.mode`) if any, or the process mode if the input file has no `mode` property.\n\n##### `options.dirMode`\n\nThe mode the directory should be created with.\n\nType: `Number`\n\nDefault: The process `mode`.\n\n##### `options.overwrite`\n\nWhether or not existing files with the same path should be overwritten. Can also be a function that takes in a file and returns `true` or `false`.\n\nType: `Boolean` or `Function`\n\nDefault: `true` (always overwrite existing files)\n\n##### `options.sourcemaps`\n\nEnables sourcemap support on files passed through the stream.  Will write inline soucemaps if specified as `true`.\nSpecifying a `string` is shorthand for the path option. Uses [gulp-sourcemaps] under the hood.\n\nExamples:\n\n```js\n// Write as inline comments\nvfs.dest('./', {\n  sourcemaps: true\n});\n\n// Write as files in the same folder\nvfs.dest('./', {\n  sourcemaps: '.'\n});\n\n// Any other options are passed through to [gulp-sourcemaps]\nvfs.dest('./', {\n  sourcemaps: {\n    path: '.',\n    addComment: false,\n    includeContent: false\n  }\n});\n```\n\nType: `Boolean`, `String` or `Object`\n\nDefault: `undefined` (do not write sourcemaps)\n\n##### other\n\nAny through2-related options are documented in [through2].\n\n### `symlink(folder[, options])`\n\nTakes a folder path string or a function as the first argument and an options object as the second. If given a function, it will be called with each [vinyl] `File` object and must return a folder path.\nReturns a stream that accepts [vinyl] `File` objects, create a symbolic link (i.e. symlink) at the folder/cwd specified, and passes them downstream so you can keep piping these around.\n\n__Note: The file will be modified after being written to this stream.__\n  - `cwd`, `base`, and `path` will be overwritten to match the folder.\n\n#### Options\n\n##### `options.cwd`\n\nThe working directory the folder is relative to.\n\nType: `String`\n\nDefault: `process.cwd()`\n\n##### `options.base`\n\nThe folder relative to the cwd. This is used to determine the file names when saving in `.symlink()`. Can also be a function that takes in a file and returns a folder path.\n\nType: `String` or `Function`\n\nDefault: The `cwd` resolved to the folder path.\n\n##### `options.dirMode`\n\nThe mode the directory should be created with.\n\nType: `Number`\n\nDefault: The process mode.\n\n##### other\n\nAny through2-related options are documented in [through2].\n\n[glob-stream]: https://github.com/gulpjs/glob-stream\n[gulp-sourcemaps]: https://github.com/floridoo/gulp-sourcemaps\n[node-glob]: https://github.com/isaacs/node-glob\n[gaze]: https://github.com/shama/gaze\n[glob-watcher]: https://github.com/wearefractal/glob-watcher\n[vinyl]: https://github.com/wearefractal/vinyl\n[through2]: https://github.com/rvagg/through2\n\n[downloads-image]: http://img.shields.io/npm/dm/vinyl-fs.svg\n[npm-url]: https://www.npmjs.com/package/vinyl-fs\n[npm-image]: https://badge.fury.io/js/vinyl-fs.svg\n\n[travis-url]: https://travis-ci.org/gulpjs/vinyl-fs\n[travis-image]: https://travis-ci.org/gulpjs/vinyl-fs.svg?branch=master\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/vinyl-fs\n[coveralls-image]: https://coveralls.io/repos/gulpjs/vinyl-fs/badge.svg\n\n[gitter-url]: https://gitter.im/gulpjs/gulp\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.png\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/wearefractal/vinyl-fs.git"
  },
  "scripts": {
    "changelog": "github-changes -o gulpjs -r vinyl-fs -b master -f ./CHANGELOG.md --order-semver --use-commit-body",
    "cover": "istanbul cover _mocha",
    "coveralls": "npm run cover && istanbul-coveralls",
    "lint": "eslint . && jscs index.js lib/ test/",
    "test": "npm run lint && mocha"
  },
  "version": "2.4.4"
}
