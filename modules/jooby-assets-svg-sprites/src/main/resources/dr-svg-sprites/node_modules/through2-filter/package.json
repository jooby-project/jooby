{
  "_args": [
    [
      {
        "raw": "through2-filter@https://registry.npmjs.org/through2-filter/-/through2-filter-2.0.0.tgz",
        "scope": null,
        "escapedName": "through2-filter",
        "name": "through2-filter",
        "rawSpec": "https://registry.npmjs.org/through2-filter/-/through2-filter-2.0.0.tgz",
        "spec": "https://registry.npmjs.org/through2-filter/-/through2-filter-2.0.0.tgz",
        "type": "remote"
      },
      "/Users/edgar/node_modules/dr-svg-sprites"
    ]
  ],
  "_from": "through2-filter@>=2.0.0 <3.0.0",
  "_id": "through2-filter@2.0.0",
  "_inCache": true,
  "_location": "/dr-svg-sprites/through2-filter",
  "_phantomChildren": {},
  "_requested": {
    "raw": "through2-filter@https://registry.npmjs.org/through2-filter/-/through2-filter-2.0.0.tgz",
    "scope": null,
    "escapedName": "through2-filter",
    "name": "through2-filter",
    "rawSpec": "https://registry.npmjs.org/through2-filter/-/through2-filter-2.0.0.tgz",
    "spec": "https://registry.npmjs.org/through2-filter/-/through2-filter-2.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/dr-svg-sprites",
    "/dr-svg-sprites/unique-stream",
    "/dr-svg-sprites/vinyl-fs"
  ],
  "_resolved": "https://registry.npmjs.org/through2-filter/-/through2-filter-2.0.0.tgz",
  "_shasum": "60bc55a0dacb76085db1f9dae99ab43f83d622ec",
  "_shrinkwrap": null,
  "_spec": "through2-filter@https://registry.npmjs.org/through2-filter/-/through2-filter-2.0.0.tgz",
  "_where": "/Users/edgar/node_modules/dr-svg-sprites",
  "author": {
    "name": "Bryce B. Baril"
  },
  "bugs": {
    "url": "https://github.com/brycebaril/through2-filter/issues"
  },
  "dependencies": {
    "through2": "~2.0.0",
    "xtend": "~4.0.0"
  },
  "description": "A through2 to create an Array.prototype.filter analog for streams.",
  "devDependencies": {
    "concat-stream": "^1.4.7",
    "stream-spigot": "^3.0.5",
    "tape": "^4.0.0"
  },
  "directories": {
    "test": "test"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/brycebaril/through2-filter#readme",
  "jshintConfig": {
    "asi": true,
    "globalstrict": true,
    "validthis": true,
    "eqnull": true,
    "node": true,
    "loopfunc": true,
    "newcap": false,
    "eqeqeq": false
  },
  "keywords": [
    "streams",
    "through",
    "through2",
    "filter"
  ],
  "license": "MIT",
  "name": "through2-filter",
  "optionalDependencies": {},
  "readme": "through2-filter\n===============\n\n[![NPM](https://nodei.co/npm/through2-filter.png)](https://nodei.co/npm/through2-filter/)\n\nThis is a super thin wrapper around [through2](http://npm.im/through2) that works like `Array.prototype.filter` but for streams.\n\nFor when through2 is just too verbose :wink:\n\nNote you will **NOT** be able to alter the content of the chunks. This is intended for filtering only. If you want to modify the stream content, use either `through2` or `through2-map`.\n\n```js\nvar filter = require(\"through2-filter\")\n\nvar skip = filter(function (chunk) {\n  // skip buffers longer than 100\n  return chunk.length < 100\n})\n\n// vs. with through2:\nvar skip = through2(function (chunk, encoding, callback) {\n  // skip buffers longer than 100\n  if (chunk.length < 100) this.push(chunk)\n  return callback()\n})\n\n// Then use your filter:\nsource.pipe(skip).pipe(sink)\n\n// Additionally accepts `wantStrings` argument to conver buffers into strings\nvar alphanum = new RegExp(\"^[A-Za-z0-1]+$\")\nvar scrub = filter({wantStrings: true}, function (str) {\n  return alphanum.exec(str)\n})\n\n// Works like `Array.prototype.filter` meaning you can specify a function that\n// takes up to two* arguments: fn(element, index)\nvar skip10 = filter(function (element, index) {\n  return index > 10\n})\n```\n\n*Differences from `Array.prototype.filter`:\n  * No third `array` callback argument. That would require realizing the entire stream, which is generally counter-productive to stream operations.\n  * `Array.prototype.filter` doesn't modify the source Array, which is somewhat nonsensical when applied to streams.\n\nAPI\n---\n\n`require(\"through2-filter\")([options], fn)`\n---\n\nCreate a `through2-filter` instance that will call `fn(chunk)`. If `fn(chunk)` returns \"true\" the chunk will be passed downstream. Otherwise it will be dropped.\n\n`require(\"through2-filter\").ctor([options], fn)`\n---\n\nCreate a `through2-filter` Type that can be instantiated via `new Type()` or `Type()` to create reusable spies.\n\n`require(\"through2-filter\").obj([options], fn)`\n---\n\nCreate a `through2-filter` that defaults to `objectMode = true`.\n\n`require(\"through2-filter\").objCtor([options], fn)`\n---\n\nCreate a `through2-filter` Type that defaults to `objectMode = true`.\n\nOptions\n-------\n\n  * wantStrings: Automatically call chunk.toString() for the super lazy.\n  * all other through2 options\n\nLICENSE\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/brycebaril/through2-filter.git"
  },
  "scripts": {
    "test": "node test/"
  },
  "version": "2.0.0"
}
